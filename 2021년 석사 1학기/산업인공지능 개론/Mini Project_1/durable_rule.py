# -*- coding: utf-8 -*-
"""Durable Rule

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/101i3sGBzHwlRZrsTcls_GCXjIvuUw4HA
"""

!pip install durable_rules

from durable.lang import*

#device Vout    state Nout,out
#device Batt    state Nout,chg,Nchg,
#device In_ban  state Nout,out
#device Board   state normal,solder_faulty,Not_insert,part_faulty,part_faulty_U,part_faulty_Q,part_faulty_F,part_faulty_D,part_faulty_L,Short_c

#정상제품     normal   
#소비자과실   C_fault
#생산불량     B_fault

with ruleset('DC UPS A/S'):
  @when_all((c.first << m.device == 'Vout') & (m.state == 'out'),   #rule1
            (m.device == 'Batt') & (m.state == 'chg'),
            (m.device == 'In_ban') & (m.state == 'out'),
            (m.device == 'Board') & (m.state == 'normal')&(m.subject == c.first.subject))
  def normal1(c):
    print('<normal1> {0} 정상제품 -> 충전후 제품발송 요망' .format(c.first.subject))

  @when_all((c.first << m.device == 'Vout') & (m.state == 'out'),   #rule2
            (m.device == 'Batt') & (m.state == 'chg'),
            (m.device == 'In_ban') & (m.state == 'Nout'),
            (m.device == 'Board') & (m.state == 'normal')&(m.subject == c.first.subject))
  def normal2(c):
    print('<normal2> {0} 정상제품 -> UPS를 충분히 충전시킨 후 다시 테스트 진행요망' .format(c.first.subject))

  @when_all((c.first << m.device == 'Vout') & (m.state == 'out'),   #rule3
            (m.device == 'Batt') & (m.state == 'Nchg'),
            (m.device == 'Board') & (m.state == 'part_faulty_U')&(m.subject == c.first.subject))
  def C_fault1(c):
    print('<C_fault1> {0} 소비자과실 -> UPS쇼트로 인해 충전회로손상 -> 충전회로 수리요망' .format(c.first.subject))

  @when_all((c.first << m.device == 'Vout') & (m.state == 'out'),   #rule4
            (m.device == 'Batt') & (m.state == 'Nchg'),
            (m.device == 'Board') & (m.state == 'part_faulty_Q')&(m.subject == c.first.subject))
  def B_fault1(c):
    print('<B_fault1> {0} 생산불량 -> 충전회로 수리요망' .format(c.first.subject))

  @when_all((c.first << m.device == 'Vout') & (m.state == 'out'),   #rule5
            (m.device == 'Batt') & (m.state == 'Nchg'),
            (m.device == 'Board') & (m.state == 'part_faulty')&(m.subject == c.first.subject))
  def B_fault2(c):
    print('<B_fault2> {0} 생산불량 -> 파손부품 수리요망' .format(c.first.subject))

  @when_all((c.first << m.device == 'Vout') & (m.state == 'out'),   #rule6
            (m.device == 'Batt') & (m.state == 'Nchg'),
            (m.device == 'Board') & (m.state == 'normal'),
            (m.device == 'Batt') & (m.state ==  'Nout')&(m.subject == c.first.subject))
  def C_fault2(c):
    print('<C_fault2> {0} 소비자과실 -> UPS 용량을 과도하게 넘어가는 장비사용인해 배터리 die -> 배터리 교체요망' .format(c.first.subject))

  @when_all((c.first << m.device == 'Vout') & (m.state == 'Nout'),   #rule7
            (m.device == 'Batt') & (m.state == 'chg'),
            (m.device == 'Board') & (m.state == 'normal')&(m.subject == c.first.subject))
  def B_fault3(c):
    print('<B_fault3> {0} 생산불량 -> 보드교체요망' .format(c.first.subject))

  @when_all((c.first << m.device == 'Vout') & (m.state == 'Nout'),   #rule8
            (m.device == 'Batt') & (m.state == 'Nchg'),
            (m.device == 'Board') & (m.state == 'normal')&(m.subject == c.first.subject))
  def B_fault4(c):
    print('<B_fault4> {0} 생산불량 -> 보드 & 배터리 전체 교체요망' .format(c.first.subject))

  @when_all((c.first << m.device == 'Vout') & (m.state == 'Nout'),   #rule9
            (m.device == 'Board') & (m.state == 'solder_faulty')&(m.subject == c.first.subject))
  def B_fault5(c):
    print('<B_fault5> {0} 생산불량 -> 무상교체대상' .format(c.first.subject))

  @when_all((c.first << m.device == 'Vout') & (m.state == 'Nout'),   #rule10
            (m.device == 'Board') & (m.state == 'Not_insert')&(m.subject == c.first.subject))
  def B_fault6(c):
    print('<B_fault6> {0} 생산불량 -> 미삽부품 삽입요망' .format(c.first.subject))

  @when_all((c.first << m.device == 'Vout') & (m.state == 'Nout'),   #rule11
            (m.device == 'Board') & (m.state == 'part_faulty_F')&(m.subject == c.first.subject))
  def C_fault5(c):
    print('<C_fault5> {0} 소비자과실 -> UPS 용량을 넘어가는 장비사용으로 인해 F손상 -> F교체요망' .format(c.first.subject))

  @when_all((c.first << m.device == 'Vout') & (m.state == 'Nout'),   #rule12
            (m.device == 'Board') & (m.state == 'part_faulty_D')&(m.subject == c.first.subject))
  def C_fault6(c):
    print('<C_fault6> {0} 소비자과실 -> UPS 규격에 맞지않는 전압을 인가 -> D교체요망' .format(c.first.subject))

  @when_all((c.first << m.device == 'Vout') & (m.state == 'Nout'),   #rule13
            (m.device == 'Board') & (m.state == 'part_faulty_L')&(m.subject == c.first.subject))
  def B_fault7(c):
    print('<B_fault7> {0} 생산불량 -> L교체요망' .format(c.first.subject))

  @when_all((c.first << m.device == 'Vout') & (m.state == 'Nout'),   #rule14
            (m.device == 'Board') & (m.state == 'part_faulty')&(m.subject == c.first.subject))
  def B_fault8(c):
    print('<B_fault8> {0} 생산불량 -> 부품교체요망' .format(c.first.subject))

  @when_all((c.first << m.device == 'Vout') & (m.state == 'Nout'),   #rule15
            (m.device == 'Board') & (m.state == 'Short_c')&(m.subject == c.first.subject))
  def C_fault7(c):
    print('<C_fault7> {0} 생산불량 -> 보드교체요망' .format(c.first.subject))

assert_fact('DC UPS A/S',{'subject':'UPS4','device':'Vout','state':'out'})
assert_fact('DC UPS A/S',{'subject':'UPS4','device':'Batt','state':'chg'})
assert_fact('DC UPS A/S',{'subject':'UPS4','device':'In_ban','state':'out'})
assert_fact('DC UPS A/S',{'subject':'UPS4','device':'Board','state':'normal'})

assert_fact('DC UPS A/S',{'subject':'UPS1','device':'Vout','state':'Nout'})
assert_fact('DC UPS A/S',{'subject':'UPS1','device':'Board','state':'Short_c'})

assert_fact('DC UPS A/S',{'subject':'UPS3','device':'Vout','state':'Nout'})
assert_fact('DC UPS A/S',{'subject':'UPS3','device':'Board','state':'solder_faulty'})





